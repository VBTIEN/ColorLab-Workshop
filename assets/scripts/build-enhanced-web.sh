#!/bin/bash

# Build Enhanced Web Interface
echo "üî® Building enhanced web interface..."

cd ../web

# Create enhanced HTML with all improvements
cat > index.html << 'EOF'
<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Image Analyzer - Enhanced</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: 'Segoe UI', sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; padding: 20px; }
        .container { max-width: 1200px; margin: 0 auto; background: white; border-radius: 15px; box-shadow: 0 20px 40px rgba(0,0,0,0.1); overflow: hidden; }
        .header { background: linear-gradient(45deg, #FF6B6B, #4ECDC4); color: white; padding: 30px; text-align: center; }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .status-bar { background: #f8f9fa; padding: 10px 30px; border-bottom: 1px solid #dee2e6; font-size: 0.9em; color: #666; }
        .status-online { color: #28a745; font-weight: bold; }
        .main-content { padding: 40px; }
        .upload-area { border: 3px dashed #ddd; border-radius: 10px; padding: 60px 20px; margin: 20px 0; cursor: pointer; transition: all 0.3s ease; }
        .upload-area:hover { border-color: #4ECDC4; background-color: #f8f9fa; }
        .upload-icon { font-size: 4em; color: #ddd; margin-bottom: 20px; }
        .btn { background: linear-gradient(45deg, #FF6B6B, #4ECDC4); color: white; border: none; padding: 15px 30px; border-radius: 25px; font-size: 1.1em; cursor: pointer; margin: 5px; }
        .btn:hover { transform: translateY(-2px); }
        .btn:disabled { opacity: 0.6; cursor: not-allowed; }
        .analysis-card { background: #f8f9fa; border-radius: 10px; padding: 25px; margin: 20px 0; border-left: 5px solid #4ECDC4; display: none; }
        .analysis-card.has-content { display: block; }
        .analysis-card h3 { color: #333; margin-bottom: 15px; font-size: 1.3em; }
        .tag { display: inline-block; background: linear-gradient(45deg, #FF6B6B, #4ECDC4); color: white; padding: 5px 12px; border-radius: 15px; margin: 5px; font-size: 0.9em; }
        .confidence { opacity: 0.8; font-size: 0.8em; }
        .color-swatch { width: 40px; height: 40px; border-radius: 50%; border: 2px solid #ddd; display: inline-flex; align-items: center; justify-content: center; margin: 5px; font-size: 0.8em; color: white; text-shadow: 1px 1px 1px rgba(0,0,0,0.5); }
        .face-analysis { background: white; border: 1px solid #ddd; border-radius: 8px; padding: 15px; margin: 10px 0; }
        .emotion-bar { display: flex; align-items: center; margin: 5px 0; }
        .emotion-name { width: 80px; font-size: 0.9em; }
        .emotion-progress { flex: 1; height: 8px; background: #e9ecef; border-radius: 4px; margin: 0 10px; overflow: hidden; }
        .emotion-fill { height: 100%; background: linear-gradient(45deg, #FF6B6B, #4ECDC4); border-radius: 4px; }
        .chat-section { background: #f8f9fa; border-radius: 10px; padding: 25px; margin-top: 30px; }
        .chat-messages { max-height: 400px; overflow-y: auto; margin-bottom: 20px; padding: 10px; }
        .message { padding: 12px 18px; margin: 10px 0; border-radius: 18px; max-width: 80%; word-wrap: break-word; }
        .user-message { background: #4ECDC4; color: white; margin-left: auto; }
        .ai-message { background: white; border: 1px solid #ddd; margin-right: auto; }
        .quick-questions { display: flex; gap: 10px; margin: 15px 0; flex-wrap: wrap; }
        .quick-question { background: #e9ecef; border: 1px solid #ddd; padding: 8px 15px; border-radius: 20px; cursor: pointer; font-size: 0.9em; }
        .quick-question:hover { background: #4ECDC4; color: white; }
        .loading { text-align: center; padding: 40px; }
        .spinner { border: 4px solid #f3f3f3; border-top: 4px solid #4ECDC4; border-radius: 50%; width: 50px; height: 50px; animation: spin 1s linear infinite; margin: 0 auto 20px; }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .error, .success, .info { padding: 15px; margin: 20px 0; border-radius: 5px; border-left: 5px solid; }
        .error { background: #ffebee; border-color: #f44336; }
        .success { background: #e8f5e8; border-color: #4caf50; }
        .info { background: #e3f2fd; border-color: #2196f3; }
        .hidden { display: none !important; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin: 15px 0; }
        .stat-item { background: white; padding: 15px; border-radius: 8px; border: 1px solid #ddd; text-align: center; }
        .stat-number { font-size: 2em; font-weight: bold; color: #4ECDC4; }
        .stat-label { font-size: 0.9em; color: #666; margin-top: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ AI Image Analyzer Enhanced</h1>
            <p>Comprehensive Analysis with Amazon AI</p>
        </div>
        
        <div class="status-bar">
            <span id="statusIndicator">üîÑ Checking connection...</span>
            <span style="float: right;">üåç Enhanced Version | Region: ap-southeast-1</span>
        </div>
        
        <div class="main-content">
            <div class="upload-section" style="text-align: center; margin-bottom: 40px;">
                <h2>üì∏ Upload Your Image</h2>
                <div class="upload-area" id="uploadArea">
                    <div class="upload-icon">üìÅ</div>
                    <p>Drag & drop your image here or click to browse</p>
                    <small>Enhanced analysis: Objects, Faces, Colors, Text, Emotions</small>
                    <input type="file" id="fileInput" accept="image/*" style="display: none;">
                </div>
                <button class="btn" id="analyzeBtn" disabled>üîç Analyze Image</button>
            </div>
            
            <div id="imagePreview" style="text-align: center; display: none;">
                <img id="previewImg" style="max-width: 100%; max-height: 400px; border-radius: 10px; margin: 20px 0; box-shadow: 0 10px 20px rgba(0,0,0,0.1);" alt="Preview">
            </div>
            
            <div id="loadingSection" class="loading" style="display: none;">
                <div class="spinner"></div>
                <p>üß† AI ƒëang ph√¢n t√≠ch to√†n di·ªán ·∫£nh c·ªßa b·∫°n...</p>
                <small>S·ª≠ d·ª•ng Amazon Rekognition & Bedrock</small>
            </div>
            
            <div id="resultsSection" style="display: none;">
                <h2>üìä Enhanced Analysis Results</h2>
                
                <div class="analysis-card" id="statsCard">
                    <h3>üìà T·ªïng quan</h3>
                    <div class="stats-grid" id="statsGrid"></div>
                </div>
                
                <div class="analysis-card" id="labelsCard">
                    <h3>üè∑Ô∏è Objects & Labels</h3>
                    <div id="labelsResult"></div>
                </div>
                
                <div class="analysis-card" id="colorsCard">
                    <h3>üé® M√†u s·∫Øc ch·ªß ƒë·∫°o</h3>
                    <div id="colorsResult"></div>
                </div>
                
                <div class="analysis-card" id="facesCard">
                    <h3>üë• Face Analysis</h3>
                    <div id="facesResult"></div>
                </div>
                
                <div class="analysis-card" id="textCard">
                    <h3>üìù Text Detection</h3>
                    <div id="textResult"></div>
                </div>
                
                <div class="analysis-card" id="artisticCard">
                    <h3>üé® Artistic Analysis</h3>
                    <div id="artisticResult"></div>
                </div>
            </div>
            
            <div id="chatSection" class="chat-section" style="display: none;">
                <h3>üí¨ Smart Chat with Amazon Q</h3>
                
                <div class="quick-questions" id="quickQuestions">
                    <div class="quick-question" data-question="Ph√¢n t√≠ch m√†u s·∫Øc chi ti·∫øt">üé® M√†u s·∫Øc</div>
                    <div class="quick-question" data-question="ƒê√°nh gi√° composition">üìê Composition</div>
                    <div class="quick-question" data-question="G·ª£i √Ω c·∫£i thi·ªán">üí° C·∫£i thi·ªán</div>
                    <div class="quick-question" data-question="Ph√¢n t√≠ch c·∫£m x√∫c">üòä C·∫£m x√∫c</div>
                    <div class="quick-question" data-question="K·ªπ thu·∫≠t ch·ª•p">üì∑ K·ªπ thu·∫≠t</div>
                </div>
                
                <div class="chat-messages" id="chatMessages"></div>
                <div style="display: flex; gap: 10px;">
                    <input type="text" style="width: calc(100% - 80px); padding: 15px; border: 2px solid #ddd; border-radius: 25px; font-size: 1em; outline: none;" id="chatInput" placeholder="H·ªèi chi ti·∫øt v·ªÅ b·ª©c ·∫£nh...">
                    <button class="btn" id="sendBtn">Send</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const API_ENDPOINT = 'https://cuwg234q8g.execute-api.ap-southeast-1.amazonaws.com/prod/analyze';
        const BUCKET_NAME = 'image-analyzer-workshop-1751722329';
        
        let currentImageData = null;
        let analysisResults = null;
        let isApiOnline = false;
        
        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            checkApiStatus();
            setupEventListeners();
            showInfo('üöÄ Enhanced AI Image Analyzer ready! Upload an image for comprehensive analysis.');
        });
        
        function setupEventListeners() {
            const uploadArea = document.getElementById('uploadArea');
            const fileInput = document.getElementById('fileInput');
            
            uploadArea.addEventListener('click', () => fileInput.click());
            uploadArea.addEventListener('dragover', (e) => { e.preventDefault(); uploadArea.style.borderColor = '#4ECDC4'; });
            uploadArea.addEventListener('drop', handleDrop);
            uploadArea.addEventListener('dragleave', () => uploadArea.style.borderColor = '#ddd');
            
            fileInput.addEventListener('change', (e) => handleFile(e.target.files[0]));
            document.getElementById('analyzeBtn').addEventListener('click', analyzeImage);
            document.getElementById('sendBtn').addEventListener('click', sendMessage);
            document.getElementById('chatInput').addEventListener('keypress', (e) => { if (e.key === 'Enter') sendMessage(); });
            
            document.getElementById('quickQuestions').addEventListener('click', (e) => {
                if (e.target.classList.contains('quick-question')) {
                    document.getElementById('chatInput').value = e.target.dataset.question;
                    sendMessage();
                }
            });
        }
        
        async function checkApiStatus() {
            try {
                const response = await fetch(API_ENDPOINT, { method: 'OPTIONS', mode: 'cors' });
                if (response.ok) {
                    isApiOnline = true;
                    document.getElementById('statusIndicator').innerHTML = '<span class="status-online">‚úÖ Enhanced API Online</span>';
                } else throw new Error('API not responding');
            } catch (error) {
                isApiOnline = false;
                document.getElementById('statusIndicator').innerHTML = '<span style="color: #dc3545;">‚ö†Ô∏è Demo Mode - Enhanced Features</span>';
            }
        }
        
        function handleDrop(e) {
            e.preventDefault();
            uploadArea.style.borderColor = '#ddd';
            if (e.dataTransfer.files.length > 0) handleFile(e.dataTransfer.files[0]);
        }
        
        function handleFile(file) {
            if (!file || !file.type.startsWith('image/')) {
                showError('Please select a valid image file');
                return;
            }
            
            if (file.size > 5 * 1024 * 1024) {
                showError('Image size must be less than 5MB');
                return;
            }
            
            const reader = new FileReader();
            reader.onload = (e) => {
                currentImageData = e.target.result;
                document.getElementById('previewImg').src = currentImageData;
                document.getElementById('imagePreview').style.display = 'block';
                document.getElementById('analyzeBtn').disabled = false;
                showSuccess('‚úÖ Image loaded! Ready for enhanced analysis.');
            };
            reader.readAsDataURL(file);
        }
        
        async function analyzeImage() {
            if (!currentImageData) return;
            
            document.getElementById('loadingSection').style.display = 'block';
            document.getElementById('resultsSection').style.display = 'none';
            document.getElementById('chatSection').style.display = 'none';
            document.getElementById('analyzeBtn').disabled = true;
            
            try {
                if (isApiOnline) {
                    const response = await fetch(API_ENDPOINT, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            bucket: BUCKET_NAME,
                            image_data: currentImageData.split(',')[1]
                        })
                    });
                    
                    if (!response.ok) throw new Error(`API failed: ${response.status}`);
                    
                    analysisResults = await response.json();
                    showSuccess('‚úÖ Enhanced analysis completed with AWS AI!');
                } else {
                    throw new Error('API offline');
                }
            } catch (error) {
                showError(`Using enhanced demo data: ${error.message}`);
                await simulateEnhancedAnalysis();
            }
            
            displayEnhancedResults();
            document.getElementById('loadingSection').style.display = 'none';
            document.getElementById('resultsSection').style.display = 'block';
            document.getElementById('chatSection').style.display = 'block';
            document.getElementById('analyzeBtn').disabled = false;
        }
        
        async function simulateEnhancedAnalysis() {
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            analysisResults = {
                basic_analysis: {
                    labels: [
                        { name: 'Person', confidence: 95.2, categories: ['People'] },
                        { name: 'Portrait', confidence: 89.1, categories: ['Photography'] },
                        { name: 'Smile', confidence: 87.3, categories: ['Expression'] },
                        { name: 'Face', confidence: 94.8, categories: ['People'] },
                        { name: 'Human', confidence: 92.5, categories: ['People'] }
                    ],
                    image_properties: {
                        dominant_colors: [
                            { color: 'Blue', hex: '#4A90E2', pixel_percent: 35.2 },
                            { color: 'White', hex: '#FFFFFF', pixel_percent: 28.7 },
                            { color: 'Beige', hex: '#F5F5DC', pixel_percent: 18.3 }
                        ]
                    },
                    faces: [{
                        age_range: { Low: 25, High: 35 },
                        gender: { value: 'Female', confidence: 92.3 },
                        emotions: [
                            { type: 'HAPPY', confidence: 85.2 },
                            { type: 'CALM', confidence: 12.1 },
                            { type: 'CONFIDENT', confidence: 8.7 }
                        ],
                        attributes: {
                            smile: { Value: true, Confidence: 89.2 },
                            eyeglasses: { Value: false, Confidence: 95.1 }
                        }
                    }],
                    text: [{ text: 'Sample Text', confidence: 92.1, type: 'LINE' }]
                },
                advanced_analysis: {
                    artistic_analysis: 'B·ª©c ·∫£nh th·ªÉ hi·ªán composition ch√¢n dung chuy√™n nghi·ªáp v·ªõi √°nh s√°ng t·ª± nhi√™n. T√¥ng m√†u xanh d∆∞∆°ng v√† tr·∫Øng t·∫°o c·∫£m gi√°c thanh tho√°t, h√†i h√≤a. Ch·ªß th·ªÉ ƒë∆∞·ª£c ƒë·∫∑t c√¢n ƒë·ªëi, c·∫£m x√∫c vui v·∫ª ƒë∆∞·ª£c truy·ªÅn t·∫£i r√µ r√†ng. K·ªπ thu·∫≠t ch·ª•p t·ªët v·ªõi ƒë·ªô s√¢u tr∆∞·ªùng ·∫£nh ph√π h·ª£p.',
                    model_used: 'Enhanced Analysis Engine'
                }
            };
        }
        
        function displayEnhancedResults() {
            const { basic_analysis, advanced_analysis } = analysisResults;
            
            // Statistics
            const stats = [];
            if (basic_analysis.labels?.length) stats.push({ number: basic_analysis.labels.length, label: 'Objects' });
            if (basic_analysis.faces?.length) stats.push({ number: basic_analysis.faces.length, label: 'Faces' });
            if (basic_analysis.text?.length) stats.push({ number: basic_analysis.text.length, label: 'Text Lines' });
            if (basic_analysis.image_properties?.dominant_colors?.length) stats.push({ number: basic_analysis.image_properties.dominant_colors.length, label: 'Colors' });
            
            if (stats.length > 0) {
                document.getElementById('statsGrid').innerHTML = stats.map(s => 
                    `<div class="stat-item"><div class="stat-number">${s.number}</div><div class="stat-label">${s.label}</div></div>`
                ).join('');
                document.getElementById('statsCard').classList.add('has-content');
            }
            
            // Labels
            if (basic_analysis.labels?.length) {
                document.getElementById('labelsResult').innerHTML = basic_analysis.labels.map(l => 
                    `<span class="tag">${l.name} <span class="confidence">${l.confidence}%</span></span>`
                ).join('');
                document.getElementById('labelsCard').classList.add('has-content');
            }
            
            // Colors
            if (basic_analysis.image_properties?.dominant_colors?.length) {
                const colors = basic_analysis.image_properties.dominant_colors;
                document.getElementById('colorsResult').innerHTML = 
                    colors.map(c => `<div class="color-swatch" style="background-color: ${c.hex}">${c.pixel_percent.toFixed(1)}%</div>`).join('') +
                    '<p style="margin-top: 10px;">M√†u s·∫Øc theo t·ª∑ l·ªá xu·∫•t hi·ªán</p>';
                document.getElementById('colorsCard').classList.add('has-content');
            }
            
            // Faces
            if (basic_analysis.faces?.length) {
                const face = basic_analysis.faces[0];
                const emotionsHtml = face.emotions.map(e => 
                    `<div class="emotion-bar">
                        <span class="emotion-name">${e.type}</span>
                        <div class="emotion-progress"><div class="emotion-fill" style="width: ${e.confidence}%"></div></div>
                        <span class="confidence">${e.confidence.toFixed(1)}%</span>
                    </div>`
                ).join('');
                
                document.getElementById('facesResult').innerHTML = 
                    `<div class="face-analysis">
                        <p><strong>Gi·ªõi t√≠nh:</strong> ${face.gender.value} (${face.gender.confidence.toFixed(1)}%)</p>
                        <p><strong>Tu·ªïi:</strong> ${face.age_range.Low}-${face.age_range.High}</p>
                        <p><strong>ƒê·∫∑c ƒëi·ªÉm:</strong> ${face.attributes.smile?.Value ? 'üòä C√≥ n·ª• c∆∞·ªùi' : ''} ${face.attributes.eyeglasses?.Value ? 'üëì ƒêeo k√≠nh' : ''}</p>
                        <div style="margin-top: 10px;"><strong>C·∫£m x√∫c:</strong>${emotionsHtml}</div>
                    </div>`;
                document.getElementById('facesCard').classList.add('has-content');
            }
            
            // Text
            if (basic_analysis.text?.length) {
                document.getElementById('textResult').innerHTML = basic_analysis.text.map(t => 
                    `<span class="tag">${t.text} <span class="confidence">${t.confidence}%</span></span>`
                ).join('');
                document.getElementById('textCard').classList.add('has-content');
            }
            
            // Artistic Analysis
            if (advanced_analysis?.artistic_analysis) {
                document.getElementById('artisticResult').innerHTML = 
                    `<div style="line-height: 1.6;">
                        <p>${advanced_analysis.artistic_analysis}</p>
                        <div style="margin-top: 15px; padding-top: 15px; border-top: 1px solid #ddd; font-size: 0.9em; color: #666;">
                            <strong>Ph√¢n t√≠ch b·ªüi:</strong> ${advanced_analysis.model_used}
                        </div>
                    </div>`;
                document.getElementById('artisticCard').classList.add('has-content');
            }
        }
        
        function sendMessage() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            if (!message) return;
            
            addMessage(message, 'user');
            input.value = '';
            
            setTimeout(() => {
                const response = generateSmartResponse(message);
                addMessage(response, 'ai');
            }, 1000);
        }
        
        function addMessage(text, sender) {
            const messagesDiv = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}-message`;
            messageDiv.textContent = text;
            messagesDiv.appendChild(messageDiv);
            messagesDiv.scrollTop = messagesDiv.scrollHeight;
        }
        
        function generateSmartResponse(question) {
            if (!analysisResults) return "H√£y ph√¢n t√≠ch ·∫£nh tr∆∞·ªõc ƒë·ªÉ t√¥i c√≥ th·ªÉ tr·∫£ l·ªùi chi ti·∫øt.";
            
            const { basic_analysis, advanced_analysis } = analysisResults;
            const lowerQ = question.toLowerCase();
            
            if (lowerQ.includes('m√†u')) {
                const colors = basic_analysis.image_properties?.dominant_colors;
                if (colors) {
                    const colorList = colors.map(c => `${c.color} (${c.pixel_percent.toFixed(1)}%)`).join(', ');
                    return `·∫¢nh c√≥ ${colors.length} m√†u ch·ªß ƒë·∫°o: ${colorList}. M√†u ${colors[0].color} chi·∫øm t·ª∑ l·ªá cao nh·∫•t, t·∫°o n√™n t√¥ng m√†u ${colors.length > 3 ? 'phong ph√∫' : 'h√†i h√≤a'}.`;
                }
            }
            
            if (lowerQ.includes('c·∫£m x√∫c')) {
                const faces = basic_analysis.faces;
                if (faces?.length) {
                    const emotions = faces[0].emotions.slice(0, 3).map(e => `${e.type} (${e.confidence.toFixed(1)}%)`).join(', ');
                    return `C·∫£m x√∫c ch·ªß ƒë·∫°o: ${emotions}. ${faces[0].emotions[0].type === 'HAPPY' ? 'B·ª©c ·∫£nh th·ªÉ hi·ªán ni·ªÅm vui v√† s·ª± t√≠ch c·ª±c.' : 'C·∫£m x√∫c trong ·∫£nh kh√° ƒëa d·∫°ng.'}`;
                }
            }
            
            if (lowerQ.includes('c·∫£i thi·ªán')) {
                return `D·ª±a tr√™n ph√¢n t√≠ch: ${advanced_analysis?.artistic_analysis || '·∫¢nh c√≥ ch·∫•t l∆∞·ª£ng t·ªët'}. G·ª£i √Ω: ƒëi·ªÅu ch·ªânh √°nh s√°ng v√† tƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n ƒë·ªÉ l√†m n·ªïi b·∫≠t ch·ªß th·ªÉ h∆°n.`;
            }
            
            if (lowerQ.includes('composition')) {
                const labels = basic_analysis.labels || [];
                return `Composition c√≥ ${labels.length} y·∫øu t·ªë ch√≠nh: ${labels.slice(0, 3).map(l => l.name).join(', ')}. ${advanced_analysis?.artistic_analysis?.split('.')[0] || 'B·ªë c·ª•c c√¢n ƒë·ªëi v√† h√†i h√≤a'}.`;
            }
            
            if (lowerQ.includes('k·ªπ thu·∫≠t')) {
                const faces = basic_analysis.faces;
                return `K·ªπ thu·∫≠t ch·ª•p: ${faces?.length ? 'ch√¢n dung chuy√™n nghi·ªáp' : 'composition t·ªët'}, ${advanced_analysis?.artistic_analysis?.includes('√°nh s√°ng') ? '√°nh s√°ng t·ª± nhi√™n' : 'ch·∫•t l∆∞·ª£ng ·ªïn ƒë·ªãnh'}. ${faces?.length ? `ƒê·ªô s·∫Øc n√©t cao, pose t·ª± nhi√™n.` : 'T·ªïng th·ªÉ k·ªπ thu·∫≠t t·ªët.'}`;
            }
            
            // Default smart response
            const mainElements = basic_analysis.labels?.slice(0, 2).map(l => l.name).join(' v√† ') || 'c√°c y·∫øu t·ªë th√∫ v·ªã';
            return `·∫¢nh ch·ª©a ${mainElements} v·ªõi ${basic_analysis.faces?.length || 0} ng∆∞·ªùi. ${advanced_analysis?.artistic_analysis?.split('.')[0] || 'Ch·∫•t l∆∞·ª£ng t·ªïng th·ªÉ t·ªët'}. B·∫°n mu·ªën t√¥i ph√¢n t√≠ch s√¢u h∆°n kh√≠a c·∫°nh n√†o?`;
        }
        
        function showError(msg) { showNotification(msg, 'error'); }
        function showSuccess(msg) { showNotification(msg, 'success'); }
        function showInfo(msg) { showNotification(msg, 'info'); }
        
        function showNotification(message, type) {
            const div = document.createElement('div');
            div.className = type;
            div.innerHTML = message;
            document.querySelector('.main-content').insertBefore(div, document.querySelector('.upload-section').nextSibling);
            setTimeout(() => div.remove(), 5000);
        }
        
        console.log('üöÄ Enhanced AI Image Analyzer loaded successfully!');
    </script>
</body>
</html>
EOF

echo "‚úÖ Enhanced web interface built successfully!"
EOF

chmod +x build-enhanced-web.sh
